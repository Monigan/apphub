version: "3.4"
services:
  postgres:
    command: postgres -c 'max_connections=500' -c 'idle_in_transaction_session_timeout=1800000'
    ports:
      - '5432:5432'
    volumes:
      - postgres-db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_INITDB_ARGS=${POSTGRES_INITDB_ARGS}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - PG_TRUST_LOCALNET=true
      - POSTGRES_HOST_AUTH_METHOD=${POSTGRES_HOST_AUTH_METHOD}
      - 'TZ=Europe/Moscow'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres && psql -U postgres -lqt | cut -d \\| -f 1 | grep -qw storage "]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      backend: { aliases: [postgres.backend] }

  pgbouncer:
    ports:
      - 6432:5432
    networks:
      backend: { aliases: [pgbouncer.backend] }

  storage:
    depends_on:
      - postgres
      - pgbouncer
      - minio
    environment:
      - SPRING_BOOT_ADMIN_CLIENT_USERNAME=${MONITOR_USER_NAME}
      - SPRING_BOOT_ADMIN_CLIENT_PASSWORD=${MONITOR_USER_PASSWORD}
      - SPRING_APPLICATION_JSON=${STORAGE_SPRING_APPLICATION_JSON}
      - JAVA_OPTS=${JAVA_OPTS}
      - APPLICATION_STORAGE_MIME_TYPES_FILTER_ALLOWED=${EXTENSIONS_ALLOWED_BY_STORAGE}
    ports:
      - 8090:8080
      - 5060:5050
    volumes:
      - storage-logs:/usr/share/app/logs
    healthcheck:
      test: curl -sS http://localhost:8080/management/health || exit 1
      interval: 30s
      timeout: 30s
      retries: 5
    networks:
      backend: { aliases: [storage.backend] }

  core:
    depends_on:
      - postgres
      - pgbouncer
    environment:
      - SPRING_APPLICATION_JSON=${CORE_SPRING_APPLICATION_JSON}
      - JAVA_OPTS=${JAVA_OPTS}
    ports:
      - 8091:8080
      - 5061:5050
    volumes:
      - core-logs:/usr/share/app/logs
    healthcheck:
      test: curl -sS http://localhost:8080/management/health || exit 1
      interval: 30s
      timeout: 30s
      retries: 5
    networks:
      backend: { aliases: [core.backend] }

  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    networks:
      backend: { aliases: [minio.backend] }
    command: server /data --console-address ":9001"

networks:
  backend:
    driver: bridge

volumes:
  postgres-db-data:
  storage-logs:
  minio-data:
  core-logs:
